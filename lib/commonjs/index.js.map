{"version":3,"sources":["index.tsx"],"names":["Detector","NativeModules","EventsName","detectorEventEmitter","NativeEventEmitter","commonAddScreenshotListener","listener","eventSubscription","addListener","UserDidTakeScreenshot","remove","commonAddScreenrecordListener","UserDidTakeScreenRecord","getListenersCount","listenerCount","listeners","length","getRecordListenersCount","startScreenshotDetection","stopScreenshotDetection","startScreenrecordDetection","stopScreenrecordDetection","isScreenRecording","Platform","OS","addScreenshotListener","select","default","ios","android","unsubscribe","addScreenrecordListener"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native'\n\nconst { Detector } = NativeModules\n\nenum EventsName {\n  UserDidTakeScreenshot = 'UIApplicationUserDidTakeScreenshotNotification',\n  UserDidTakeScreenRecord = 'UIApplicationUserDidTakeScreenRecordNotification',\n}\n\nconst detectorEventEmitter = new NativeEventEmitter(Detector)\n\ntype Unsubscribe = () => void\n\nconst commonAddScreenshotListener = (listener: () => void): Unsubscribe => {\n  const eventSubscription = detectorEventEmitter.addListener(\n    EventsName.UserDidTakeScreenshot,\n    () => listener(),\n    {}\n  )\n\n  return () => {\n    eventSubscription.remove()\n  }\n}\n\nconst commonAddScreenrecordListener = (listener: () => void): Unsubscribe => {\n  const eventSubscription = detectorEventEmitter.addListener(\n    EventsName.UserDidTakeScreenRecord,\n    () => listener(),\n    {}\n  )\n\n  return () => {\n    eventSubscription.remove()\n  }\n}\n\nconst getListenersCount = (): number => {\n  return (\n    // React Native 0.64+\n    // @ts-ignore\n    detectorEventEmitter.listenerCount?.(EventsName.UserDidTakeScreenshot) ??\n    // React Native < 0.64\n    // @ts-ignore\n    detectorEventEmitter.listeners?.(EventsName.UserDidTakeScreenshot).length ??\n    0\n  )\n}\n\nconst getRecordListenersCount = (): number => {\n  return (\n    // React Native 0.64+\n    // @ts-ignore\n    detectorEventEmitter.listenerCount?.(EventsName.UserDidTakeScreenRecord) ??\n    // React Native < 0.64\n    // @ts-ignore\n    detectorEventEmitter.listeners?.(EventsName.UserDidTakeScreenRecord)\n      .length ??\n    0\n  )\n}\n\nexport const startScreenshotDetection = () => {\n  Detector.startScreenshotDetection()\n}\n\nexport const stopScreenshotDetection = () => {\n  Detector.stopScreenshotDetection()\n}\n\nexport const startScreenrecordDetection = () => {\n  Detector.startScreenrecordDetection()\n}\n\nexport const stopScreenrecordDetection = () => {\n  Detector.stopScreenrecordDetection()\n}\n\nexport const isScreenRecording = async (): Promise<boolean | undefined> => {\n  if (Platform.OS !== 'ios') {\n    return\n  }\n\n  return await Detector?.isScreenRecording?.()\n}\n\nexport const addScreenshotListener = Platform.select<\n  (listener: () => void) => Unsubscribe\n>({\n  default: (): Unsubscribe => () => {},\n  ios: commonAddScreenshotListener,\n  android: (listener: () => void): Unsubscribe => {\n    if (getListenersCount() === 0) {\n      Detector.startScreenshotDetection()\n    }\n\n    const unsubscribe: Unsubscribe = commonAddScreenshotListener(listener)\n\n    return () => {\n      unsubscribe()\n\n      if (getListenersCount() === 0) {\n        Detector.stopScreenshotDetection()\n      }\n    }\n  },\n})\n\nexport const addScreenrecordListener = Platform.select<\n  (listener: () => void) => Unsubscribe\n>({\n  default: (): Unsubscribe => () => {},\n  ios: (): Unsubscribe => () => {},\n  android: (listener: () => void): Unsubscribe => {\n    if (getRecordListenersCount() === 0) {\n      Detector.startScreenrecordDetection()\n    }\n\n    const unsubscribe: Unsubscribe = commonAddScreenrecordListener(listener)\n\n    return () => {\n      unsubscribe()\n\n      if (getRecordListenersCount() === 0) {\n        Detector.stopScreenrecordDetection()\n      }\n    }\n  }\n})"]}