{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","Platform","Detector","EventsName","detectorEventEmitter","commonAddScreenshotListener","listener","eventSubscription","addListener","UserDidTakeScreenshot","remove","commonAddScreenrecordListener","UserDidTakeScreenRecord","getListenersCount","listenerCount","listeners","length","getRecordListenersCount","startScreenshotDetection","stopScreenshotDetection","startScreenrecordDetection","stopScreenrecordDetection","isScreenRecording","OS","addScreenshotListener","select","default","ios","android","unsubscribe","addScreenrecordListener"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native'\n\nconst { Detector } = NativeModules\n\nenum EventsName {\n  UserDidTakeScreenshot = 'UIApplicationUserDidTakeScreenshotNotification',\n  UserDidTakeScreenRecord = 'UIApplicationUserDidTakeScreenRecordNotification',\n}\n\nconst detectorEventEmitter = new NativeEventEmitter(Detector)\n\ntype Unsubscribe = () => void\n\nconst commonAddScreenshotListener = (listener: () => void): Unsubscribe => {\n  const eventSubscription = detectorEventEmitter.addListener(\n    EventsName.UserDidTakeScreenshot,\n    () => listener(),\n    {}\n  )\n\n  return () => {\n    eventSubscription.remove()\n  }\n}\n\nconst commonAddScreenrecordListener = (listener: () => void): Unsubscribe => {\n  const eventSubscription = detectorEventEmitter.addListener(\n    EventsName.UserDidTakeScreenRecord,\n    () => listener(),\n    {}\n  )\n\n  return () => {\n    eventSubscription.remove()\n  }\n}\n\nconst getListenersCount = (): number => {\n  return (\n    // React Native 0.64+\n    // @ts-ignore\n    detectorEventEmitter.listenerCount?.(EventsName.UserDidTakeScreenshot) ??\n    // React Native < 0.64\n    // @ts-ignore\n    detectorEventEmitter.listeners?.(EventsName.UserDidTakeScreenshot).length ??\n    0\n  )\n}\n\nconst getRecordListenersCount = (): number => {\n  return (\n    // React Native 0.64+\n    // @ts-ignore\n    detectorEventEmitter.listenerCount?.(EventsName.UserDidTakeScreenRecord) ??\n    // React Native < 0.64\n    // @ts-ignore\n    detectorEventEmitter.listeners?.(EventsName.UserDidTakeScreenRecord)\n      .length ??\n    0\n  )\n}\n\nexport const startScreenshotDetection = () => {\n  Detector.startScreenshotDetection()\n}\n\nexport const stopScreenshotDetection = () => {\n  Detector.stopScreenshotDetection()\n}\n\nexport const startScreenrecordDetection = () => {\n  Detector.startScreenrecordDetection()\n}\n\nexport const stopScreenrecordDetection = () => {\n  Detector.stopScreenrecordDetection()\n}\n\nexport const isScreenRecording = async (): Promise<boolean | undefined> => {\n  if (Platform.OS !== 'ios') {\n    return\n  }\n\n  return await Detector?.isScreenRecording?.()\n}\n\nexport const addScreenshotListener = Platform.select<\n  (listener: () => void) => Unsubscribe\n>({\n  default: (): Unsubscribe => () => {},\n  ios: commonAddScreenshotListener,\n  android: (listener: () => void): Unsubscribe => {\n    if (getListenersCount() === 0) {\n      Detector.startScreenshotDetection()\n    }\n\n    const unsubscribe: Unsubscribe = commonAddScreenshotListener(listener)\n\n    return () => {\n      unsubscribe()\n\n      if (getListenersCount() === 0) {\n        Detector.stopScreenshotDetection()\n      }\n    }\n  },\n})\n\nexport const addScreenrecordListener = Platform.select<\n  (listener: () => void) => Unsubscribe\n>({\n  default: (): Unsubscribe => () => {},\n  ios: (): Unsubscribe => () => {},\n  android: (listener: () => void): Unsubscribe => {\n    if (getRecordListenersCount() === 0) {\n      Detector.startScreenrecordDetection()\n    }\n\n    const unsubscribe: Unsubscribe = commonAddScreenrecordListener(listener)\n\n    return () => {\n      unsubscribe()\n\n      if (getRecordListenersCount() === 0) {\n        Detector.stopScreenrecordDetection()\n      }\n    }\n  }\n})"]}