{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","Platform","Detector","EventsName","detectorEventEmitter","commonAddScreenshotListener","listener","eventSubscription","addListener","UserDidTakeScreenshot","remove","getListenersCount","listenerCount","listeners","length","addScreenshotListener","select","default","ios","android","startScreenshotDetection","unsubscribe","stopScreenshotDetection"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,QAA5C,QAA4D,cAA5D;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAeH,aAArB;IAEKI,U;;WAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAIL,MAAMC,oBAAoB,GAAG,IAAIJ,kBAAJ,CAAuBE,QAAvB,CAA7B;;AAIA,MAAMG,2BAA2B,GAAIC,QAAD,IAAuC;AACzE,QAAMC,iBAAiB,GAAGH,oBAAoB,CAACI,WAArB,CACxBL,UAAU,CAACM,qBADa,EAExB,MAAMH,QAAQ,EAFU,EAGxB,EAHwB,CAA1B;AAMA,SAAO,MAAM;AACXC,IAAAA,iBAAiB,CAACG,MAAlB;AACD,GAFD;AAGD,CAVD;;AAYA,MAAMC,iBAAiB,GAAG,MAAc;AAAA;;AACtC,SACE;AACA;AAFF,+DAGEP,oBAAoB,CAACQ,aAHvB,2DAGE,4BAAAR,oBAAoB,EAAiBD,UAAU,CAACM,qBAA5B,CAHtB,yEAIE;AACA;AALF,8BAMEL,oBAAoB,CAACS,SANvB,2DAME,4BAAAT,oBAAoB,EAAaD,UAAU,CAACM,qBAAxB,CAApB,CAAmEK,MANrE,uCAOE;AAPF;AASD,CAVD;;AAYA,OAAO,MAAMC,qBAAqB,GAAGd,QAAQ,CAACe,MAAT,CAEnC;AACAC,EAAAA,OAAO,EAAE,MAAmB,MAAM,CAAE,CADpC;AAEAC,EAAAA,GAAG,EAAEb,2BAFL;AAGAc,EAAAA,OAAO,EAAGb,QAAD,IAAuC;AAC9C,QAAIK,iBAAiB,OAAO,CAA5B,EAA+B;AAC7BT,MAAAA,QAAQ,CAACkB,wBAAT;AACD;;AAED,UAAMC,WAAwB,GAAGhB,2BAA2B,CAACC,QAAD,CAA5D;AAEA,WAAO,MAAM;AACXe,MAAAA,WAAW;;AAEX,UAAIV,iBAAiB,OAAO,CAA5B,EAA+B;AAC7BT,QAAAA,QAAQ,CAACoB,uBAAT;AACD;AACF,KAND;AAOD;AAjBD,CAFmC,CAA9B","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst { Detector } = NativeModules;\n\nenum EventsName {\n  UserDidTakeScreenshot = 'UIApplicationUserDidTakeScreenshotNotification',\n}\n\nconst detectorEventEmitter = new NativeEventEmitter(Detector);\n\ntype Unsubscribe = () => void;\n\nconst commonAddScreenshotListener = (listener: () => void): Unsubscribe => {\n  const eventSubscription = detectorEventEmitter.addListener(\n    EventsName.UserDidTakeScreenshot,\n    () => listener(),\n    {}\n  );\n\n  return () => {\n    eventSubscription.remove();\n  };\n};\n\nconst getListenersCount = (): number => {\n  return (\n    // React Native 0.64+\n    // @ts-ignore\n    detectorEventEmitter.listenerCount?.(EventsName.UserDidTakeScreenshot) ??\n    // React Native < 0.64\n    // @ts-ignore\n    detectorEventEmitter.listeners?.(EventsName.UserDidTakeScreenshot).length ??\n    0\n  );\n};\n\nexport const addScreenshotListener = Platform.select<\n  (listener: () => void) => Unsubscribe\n>({\n  default: (): Unsubscribe => () => {},\n  ios: commonAddScreenshotListener,\n  android: (listener: () => void): Unsubscribe => {\n    if (getListenersCount() === 0) {\n      Detector.startScreenshotDetection();\n    }\n\n    const unsubscribe: Unsubscribe = commonAddScreenshotListener(listener);\n\n    return () => {\n      unsubscribe();\n\n      if (getListenersCount() === 0) {\n        Detector.stopScreenshotDetection();\n      }\n    };\n  },\n});\n"]}